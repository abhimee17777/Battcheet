// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  conversations ConversationParticipant[]
  messages      Message[]
  seenMessages  SeenMessage[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  isGroup       Boolean   @default(false)
  
  messages      Message[]
  participants  ConversationParticipant[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  
  user          User         @relation(fields: [userId], references: [id])
  conversation  Conversation @relation(fields: [conversationId], references: [id])

  @@index([userId])
  @@index([conversationId])
}

model Message {
  id             String    @id @default(cuid())
  content        String
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  userId         String
  conversationId String
  
  user          User         @relation(fields: [userId], references: [id])
  conversation  Conversation @relation(fields: [conversationId], references: [id])
  seenBy        SeenMessage[]

  @@index([userId])
  @@index([conversationId])
}

model SeenMessage {
  id        String   @id @default(cuid())
  userId    String
  messageId String
  seenAt    DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId])
  @@index([userId])
  @@index([messageId])
}
